#!/usr/bin/env python3

import json
import re
import sys
import git
import pprint
import argparse
import yaml
import datetime

pprint = pprint.PrettyPrinter().pprint

sob_email = re.compile('Signed-off-by: (.+)<(.+@.+)>')
developers = {}
groups = []

def list_signed_offs(message, author):
    sob = []
    for line in message.splitlines():
        if line.startswith('Signed-off-by:'):
            m = sob_email.match(line)
            if not m:
                continue
            name = m.group(1)
            email = m.group(2)
            if email != author and email not in sob:
                sob.append({'name': name, 'email': email})
    return sob

# returns dev information if the group name corresponds to email,date, or None
def check_developer(email, date, name):
    for d in developers:
        if re.match("|".join(developers[d]['emails']), email):
            # for org, we use the name from the commit, since we don't have anything better.
            if 'organization' in developers[d]:
                return { 'name': name, 'group': d }

            for i in sorted(developers[d]['groups'], key=lambda x: x[list(x.keys())[0]]['start'], reverse=True):
                group = list(i.keys())[0]
                if datetime.date.fromtimestamp(date) > i[group]['start']:
                    if groups and not group in groups:
                        return None
                    return { 'name': d, 'group': group }
    return None

def team_commits(refspec):
    repo = git.Repo('.')
    it = repo.iter_commits(refspec)
    for commit in it:
        if len(commit.parents) > 1:
            continue

        author = check_developer(commit.author.email, commit.authored_date, commit.author.name)

        sob_list = list_signed_offs(commit.message, commit.author.email)
        non_author_sob = list(map(lambda s: check_developer(s['email'], commit.authored_date, s['name']), sob_list))
        non_author_sob = list(filter(None, non_author_sob))

        if author or non_author_sob:
            yield((commit, author, non_author_sob))

def main(args):
    num_author = 0
    num_non_author_sob = 0
    authors = {}
    sobs = {}

    # TODO: we should probably split developers and organization in 2
    # different objects, so that we check developers first, in case there are multiple matches
    for f in args.identity:
        with open(f.name) as file:
            developers.update(yaml.safe_load(file.read()))

    if args.groups:
        for g in args.groups:
            groups.append(g)

    if args.verbose:
        print(developers)
        print(groups)
        print(args.show)

    commits = team_commits(args.refspec)
    for c in commits:
        commit, author, non_author_sob = c

        if args.verbose > 1:
            if author or non_author_sob:
                print(commit)

        if author:
            num_author = num_author + 1
            authors[author['name']] = authors.get(author['name'], 0) + 1
        if non_author_sob:
            num_non_author_sob = num_non_author_sob + 1
            for a in non_author_sob:
                sobs[a['name']] = sobs.get(a['name'], 0) + 1

        if 'signedoff' in args.show and non_author_sob:
            if 'header' in args.show:
                try:
                    csvHeader
                except NameError:
                    print("Signed-off Group, Signed-off Name, Author Group, SHA, Author, Year, Month, Files, Insertions, Deletions, Total")
                    csvHeader = True

            for a in non_author_sob:
                print("%s, %s, %s , %s , %s , %s , %s , %s , %s , %s , %s" %
                      (a['group'],
                       a['name'],
                       author['group'] if author else 'n/a',
                       commit,
                       author['name'] if author else commit.author.name.replace(',', '/'),
                       datetime.date.fromtimestamp(commit.authored_date).year,
                       datetime.date.fromtimestamp(commit.authored_date).month,
                       commit.stats.total['files'],
                       commit.stats.total['insertions'],
                       commit.stats.total['deletions'],
                       commit.stats.total['lines']))

        if 'commits' in args.show and author:
            if 'header' in args.show:
                try:
                    csvHeader
                except NameError:
                    print("Group, SHA, Author, Year, Month, Files, Insertions, Deletions, Total")
                    csvHeader = True

            print("%s , %s , %s , %s , %s , %s , %s , %s , %s" %
                  (author['group'],
                   commit,
                   author['name'],
                   datetime.date.fromtimestamp(commit.authored_date).year,
                   datetime.date.fromtimestamp(commit.authored_date).month,
                   commit.stats.total['files'],
                   commit.stats.total['insertions'],
                   commit.stats.total['deletions'],
                   commit.stats.total['lines']))

    if 'summary' in args.show:
        print('Authored Total: %d' % num_author)
        for n in sorted(authors, key=authors.get, reverse=True): print("%s: %s" % (n, authors[n]))
        print('\nNon-author-sob Total: %d' % num_non_author_sob)
        for n in sorted(sobs, key=sobs.get, reverse=True): print("%s: %s" % (n, sobs[n]))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose",
                        help="enable verbose output",
                        action="count",
                        default=0)
    parser.add_argument("-i", "--identity",
                        help="Identity files",
                        type=argparse.FileType('r'),
                        required=True,
                        nargs='+')
    parser.add_argument("-g", "--groups",
                        help="restrict developers from these groups",
                        type=str,
                        nargs='*')
    parser.add_argument("-r", "--refspec",
                        help="refspec to extract commits",
                        type=str)
    parser.add_argument("-s", "--show",
                        help="List of results/stats to display",
                        type=str,
                        choices=['summary', 'commits', 'signedoff', 'header'],
                        default=['summary'],
                        nargs='*')

    main(parser.parse_args())
