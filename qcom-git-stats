#!/usr/bin/env python3

import json
import re
import sys
import git
import pprint
import argparse
import yaml
import datetime

pprint = pprint.PrettyPrinter().pprint

sob_email = re.compile('.+<(.+@.+)>')
developers = {}
groups = []

def list_signed_offs(message, author):
    sob = []
    for line in message.splitlines():
        if line.startswith('Signed-off-by:'):
            m = sob_email.match(line)
            if not m:
                continue
            if m.group(1) != author and m.group(1) not in sob:
                sob.append(m.group(1))
    return sob

# returns dev information if the group name corresponds to email,date, or None
def check_developer(email, date):
    for d in developers:
        if email in developers[d]['emails']:
            for i in sorted(developers[d]['groups'], key=lambda x: x[list(x.keys())[0]]['start'], reverse=True):
                group = list(i.keys())[0]
                if datetime.date.fromtimestamp(date) > i[group]['start']:
                    if groups and not group in groups:
                        return None
                    return { 'name': d, 'group': group }
    return None

def team_commits(refspec):
    repo = git.Repo('.')
    it = repo.iter_commits(refspec)
    for commit in it:
        if len(commit.parents) > 1:
            continue

        author = check_developer(commit.author.email, commit.authored_date)
        committer = check_developer(commit.committer.email, commit.committed_date)

        sob_list = list_signed_offs(commit.message, commit.author.email)
        non_author_sob = list(map(lambda s: check_developer(s, commit.authored_date), sob_list))
        non_author_sob = list(filter(None, non_author_sob))

        if author or committer or non_author_sob:
            yield((str(commit), author, committer, non_author_sob))

def main(args):
    num_author = 0
    num_non_author_sob = 0
    authors = {}
    sobs = {}

    for f in args.identity:
        with open(f.name) as file:
            developers.update(yaml.safe_load(file.read()))

    if args.groups:
        for g in args.groups:
            groups.append(g)

    if args.verbose:
        pprint(developers)
        pprint(groups)

    commits = team_commits(args.refspec)
    for commit in commits:
        sha, author, committer, non_author_sob = commit

        if args.verbose > 1:
            if author or committer or non_author_sob:
                print(commit)

        if author:
            num_author = num_author + 1
            authors[author['name']] = authors.get(author['name'], 0) + 1
        if non_author_sob:
            num_non_author_sob = num_non_author_sob + 1
            for a in non_author_sob:
                sobs[a['name']] = sobs.get(a['name'], 0) + 1

    print('Authored Total: %d' % num_author)
    for n in sorted(authors, key=authors.get, reverse=True): print("%s: %s" % (n, authors[n]))
    print('\nNon-author-sob Total: %d' % num_non_author_sob)
    for n in sorted(sobs, key=sobs.get, reverse=True): print("%s: %s" % (n, sobs[n]))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose",
                        help="enable verbose output",
                        action="count",
                        default=0)
    parser.add_argument("-i", "--identity",
                        help="Identity files",
                        type=argparse.FileType('r'),
                        nargs='+')
    parser.add_argument("-g", "--groups",
                        help="restrict developers from these groups",
                        type=str,
                        nargs='*')
    parser.add_argument("-r", "--refspec",
                        help="refspec to extract commits",
                        type=str)

    main(parser.parse_args())
